####面相对象基本原则
1   单一职责，一个类只做一件事
2   类的扩展应该是开放的，类的修改应该是封闭的
3   类之间不应该强依赖
4   尽可能配置化，而不是硬编码




####PSR-0规范
1 命名空间必须和绝对路径一致
2 类首字母必须大写
2 除入口文件外，其他'.php'必须只有一个类



####基础设计模式
工厂模式    使用工厂方法或者类生成对象，而不是在代码中直接new
(如果类名进行了修改，可以集中在工厂中修改)


单例模式    使某个类的对象仅允许创建一个
(将__construct()改为private, 类无法实例化
 使用getInstance()代替
 确保某个类只会创建一次(例如数据库连接类)
 )


注册树模式    全局共享和交换对象
(将对象放在同一个注册类中)


适配器模式      将不同的函数接口封装成统一的API
(例如将mysqli 和 pdo 封装)


策略模式        将一组特定的行为和算法封装成类，以适应特定的上下文环境
(代码解耦)

数据对象映射模式        是将对象和数据存储映射起来，对一个对象的操作会映射为对数据存储的操作
(model)


观察者模式      当一个对象发生改变时，依赖它的对象全部会收到通知，并自动更新
(低耦合，非侵入式)


原型模式
与工厂模式类似，都是创建对象，不同的是通过clone的方式创建新的对象，避免了重复的初始化创建类操作
(适用于大对象的创建)


装饰器模式      可动态的添加修改类的功能
传统模式下修改一个已有固定功能的类的时候， 需要写一个子类对其重写，装饰器模式仅需在运行时添加一个装饰器对象即可
(灵活性)


迭代器模式      \Iterator(五个方法) 执行一些循环操作


代理模式    对某些实体操作进行封装
(例如mysql的主从结构)


####标准库SPL
常见数据结构

栈(先进后出)
$stack = new Splstack();
$stack->push('1');
$stack->push('2');

$stack->pop();//2
$stack->pop();//1

队列(先进先出)
$queue = new SplQueue();

$queue->enqueue(1);
$queue->enqueue(2);

$queue->dequeue();//1
$queue->dequeue();//2

堆
$heap = new SplMinHeap();
$heap->insert(1);
$heap->insert(2);

固定尺寸的数组
$array = new SplFixedArray(10);



####php标准类
\ArrayAccess    允许对象以数组的形式访问
\Iterator       迭代模式
