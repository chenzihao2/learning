PHP基础
1. PHP底层的运行机制和原理
    -------------------------------

    扫描php代码切割成有意义的标识Token
                ||
    基于语法分析器将Token转化为抽象语法树
                ||
    将语法树转换为Opcode(Zend引擎)
                ||
    执行Opcode(Zend引擎)

    -------------------------------

    Zend引擎
    词法语法分析,AST编译和opcode的执行，变量设计，内存管理，进程管理

    -------------------------------

    SAPI(外部模块交互)
    apache2handler, fpm-cgi, cli
    
    -------------------------------

    扩展部分

2. nginx和php-fpm的通信机制(包括cgi，fastcgi，php-fpm的机制与不同)
    -------------------------------

    cgi协议
    解释型语言需要用到解析器能被服务器识别，CGI协议使解释器和服务器(nginx)可以互相通信
    cgi每处理一个请求需要fork一个cgi进程，请求结束后在kill,浪费资源(每次都要加载配置，初始化环境)

    -------------------------------

    fastcgi
    启动一个master进程，然后初始化环境，再启动多个worker进程，当有请求的时候会传递给worker,然后立即接受下一个请求
    fastcgi处理请求之后不会kill掉进程，继续处理多个请求

    -------------------------------

    php-fpm
    fastcig协议的一个实现，任何实现了fastcgi的服务器都能与之通信
    同时还是一个php进程管理器，包含master和多个worker进程
    master负责监听端口，接收来自服务器的请求
    worker内部嵌入一个php解释器，是真正php代码执行地方


    -------------------------------

    nginx--tcp socket--fastcgi--php-fpm--php解释器--php

    -------------------------------
3. php-fpm.conf配置⽂件的每一个配置项代表的意思

    -------------------------------
    listen.allowed_clients = 127.0.0.1      允许访问的ip白名单
    pm = dynamic(进程数动态变化) | static(进程数固定)
    pm.max_children = 50 (dynamic 最大进程数) | (固定启动进程数)
    pm.start_servers = 2 (dynamic 启动时的进程数)
    pm.max_requests = 500                   每个进程重启之前处理的服务请求数(防止内存泄露)
    pm.min_spare_servers = 1                系统空闲最小值
    pm.max_spare_servers = 3                系统空闲最大值
    
    -------------------------------

4. nginx.conf配置文件的每个配置项所代表的意思
5. PHP的内存管理理机制
	cow
6. PHP的垃圾回收机制

    -------------------------------
    1，当一个对象没有任何变量指向它的时候，这个对象就成为垃圾，php会在内存中销毁他
    2，当一个php的线程结束是，当前所有占用的内存空间都会被销毁
    3，__destruct()
    4, unset()
    -------------------------------

7. PHP底层数据结构的实现原理(主要是hashtable)

    -------------------------------
    hashtable 是zend的核心数据结构，典型的hash表散列结构，同时通过附加一个双向链表，实现正向反向遍历
    key-value 查询
    数组使用
    添加删除节点O(1)复杂度
    key, value 支持混合类型
    -------------------------------

8. PHP7的新特性(与PHP5的不不同点)
9. PHP的各种魔术⽅方法的运⽤
10. PHP各种设计模式
mysql基础
1. char和varchar的区别，性能和性能不同的原理
2. mysql的⼏种存储引擎
3. mysql事务的隔离级别以及实现原理(包括脏读，幻读等概念以及锁相关的东⻄)
    -------------------------------
    mysql隔离级别： 读未提交(度提交，可重复读，串行化)
    脏读，事务未提交的时候读到了不存在的数据
    幻读，事务A在执行的过程中有新的数据添加
    -------------------------------
4. mysql基本的性能分析和优化
5. mysql索引的实现原理理和机制(包括innodb和myisam的所有索引实现)
6. mysql的主从同步机制的实现原理理
redis基础
1. redis的基本数据类型
2. 各个数据类型所应⽤用的场景
3. redis的缓存雪崩和缓存穿透概念和解决⽅方案
4. redis的两种持久化⽅方式以及对应原理理
5. redis的主从同步实现和原理
6. redis的各个数据类型的底层的数据结构以及实现原理
7. redis单线程单进程性能⾼的原因，以及为什么不⽤多进程去连接获取数据
    -------------------------------
    redis基于内存，cpu不会成为瓶颈，单线程容易实现，省去切换线程的时间
    redis采用epoll多路复用 可以处理高并发
    -------------------------------

8. redis分布式锁的实现和原理
9. redis的淘汰策略
    -------------------------------
    当redis达到内存上限时，redis会根据配置的策略进行淘汰(LRU算法)
    noeviction: 不删除策略，直接返回错误信息
    allkeys-lru：针对所有的key,优先删除最少使用的key
    volatile-lru: 只针对有expire的key
    allkeys-random：针对所有的key,随机删除
    volatile-random：针对有expire的key,随机删除
    volatile-ttl: 针对expire的key, 删除剩余时间短的
    -------------------------------
10. redis分布式锁
tcp基础
三次握⼿手和四次挥⼿手的流程
linux基础
1. 如何查看服务器负载(常用的top...)
    ps -axu --sort -pmem
2. 如何查看磁盘剩余量量
    df -h
4. awk，sed，grep的各种用法
5. 各种查看网络相关的命令
    ifconfig
    netstat
6. 熟知其他常⽤用的基本命令

数据结构与算法
1. 基础的⼏几个排序算法和查找算法的机制和实现，redis⾥里里涉及的各个数据结构(包括hash，链表，跳表，压缩表等等)，mysql的索引实现的B树，B+树等等。
2. 网上各种能玩死⼈人的算法题以及各种听都没听过的算法实现

场景类
1. 分布式场景(服务的搭建，数据的同步和一致性，分布式事务等等)
2. 模拟类似微信聊天的场景描述设计⽅方案
3. 给你n台服务器器，让你描述一下如何通过这n台服务器部署一个稳定的⾼并发⽹站
4. 如何保证线上项⽬目的稳定性(从代码的容错和服务部署的容灾和恢复能⼒力力两个⻆角度描述)
5. ⾼高并发场景的应对策略略(秒杀场景如何保证线上的稳定，包括服务器器负载，mysql负载和读写，redis的读写和负载等等多个⽅方⾯面考虑)
6. 502和504错误如何定位排查错误
7. 已知线上有慢查询，并且定位到就是mysql查询的问题，如何排查是哪个环节出了了问题(先分析语句句，再看⽹网络情况，再看主从同步是否合理理，配置是否⽤用的域名，域名
的解析过程也耗时等等)
8. 线上⼏几kw数据量量的表如何添加字段或添加索引(避免线上数据库锁死的解决⽅方案)
9. 不不同场景下⼤大数据量量的分库分表设计⽅方案
10. 设计⼀一个PHP框架的核⼼心都有哪些(服务容器器，路路由解析，服务提供者，数据操作，数据安全，设计模式，框架稳定性，框架扩展性等各⽅方⾯面)

